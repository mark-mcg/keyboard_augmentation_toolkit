using System;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Text;

namespace KAT
{
    public class TextUtils
    {
        public static string FormatText(string text)
        {
            string ret = text;
            //Debug.Log("FormatText called for text " + text);
            if (text.Length == 5)
            {
                // unique case, we have a hex code and need to generate the surrogates
                // https://stackoverflow.com/questions/14347799/how-do-i-create-a-string-with-a-surrogate-pair-inside-of-it
                try
                {
                    //Debug.Log("Generating surrogate pair for " + text);
                    ret = Char.ConvertFromUtf32(Int32.Parse(ret, NumberStyles.HexNumber));
                    //Debug.Log("Surrogate pair is: " + ret);
                }
                catch (FormatException fe)
                {
                    //Debug.LogError(fe);
                }
            }

            // otherwise, assume surrogates have been provided (e.g. \uD83C\uDDE8) or generated by this point
            ret = DecodeEncodedNonAsciiCharacters(ret);

            //Debug.Log("Text was `" + text + "` now formatted to `" + ret + "`");
            return ret;
        }

        public static string EncodeNonAsciiCharacters(string value)
        {
            StringBuilder sb = new StringBuilder();
            foreach (char c in value)
            {
                if (c > 127)
                {
                    // This character is too big for ASCII
                    string encodedValue = "\\u" + ((int)c).ToString("x4");
                    sb.Append(encodedValue);
                }
                else
                {
                    sb.Append(c);
                }
            }
            return sb.ToString();
        }

        public static string DecodeEncodedNonAsciiCharacters(string value)
        {
            return Regex.Replace(
                value,
                @"\\u(?<Value>[a-zA-Z0-9]{4})",
                m =>
                {
                    return ((char)int.Parse(m.Groups["Value"].Value, NumberStyles.HexNumber)).ToString();
                });
        }
    }
}
